package procfs

import (
	"bytes"
	"fmt"
	"path"
	"testing"
)

type NetSnmp6TestCase struct {
	name          string
	procfsRoot    string
	primeNetSnmp6 *NetSnmp6
	wantNetSnmp6  *NetSnmp6
	wantError     error
}

var netSnmp6TestdataDir = path.Join(PROCFS_TESTDATA_ROOT, "net", "snmp6")

var netSnmp6IndexName = []string{
	"NET_SNMP6_IP6_IN_RECEIVES",
	"NET_SNMP6_IP6_IN_HDR_ERRORS",
	"NET_SNMP6_IP6_IN_TOO_BIG_ERRORS",
	"NET_SNMP6_IP6_IN_NO_ROUTES",
	"NET_SNMP6_IP6_IN_ADDR_ERRORS",
	"NET_SNMP6_IP6_IN_UNKNOWN_PROTOS",
	"NET_SNMP6_IP6_IN_TRUNCATED_PKTS",
	"NET_SNMP6_IP6_IN_DISCARDS",
	"NET_SNMP6_IP6_IN_DELIVERS",
	"NET_SNMP6_IP6_OUT_FORW_DATAGRAMS",
	"NET_SNMP6_IP6_OUT_REQUESTS",
	"NET_SNMP6_IP6_OUT_DISCARDS",
	"NET_SNMP6_IP6_OUT_NO_ROUTES",
	"NET_SNMP6_IP6_REASM_TIMEOUT",
	"NET_SNMP6_IP6_REASM_REQDS",
	"NET_SNMP6_IP6_REASM_OKS",
	"NET_SNMP6_IP6_REASM_FAILS",
	"NET_SNMP6_IP6_FRAG_OKS",
	"NET_SNMP6_IP6_FRAG_FAILS",
	"NET_SNMP6_IP6_FRAG_CREATES",
	"NET_SNMP6_IP6_IN_MCAST_PKTS",
	"NET_SNMP6_IP6_OUT_MCAST_PKTS",
	"NET_SNMP6_IP6_IN_OCTETS",
	"NET_SNMP6_IP6_OUT_OCTETS",
	"NET_SNMP6_IP6_IN_MCAST_OCTETS",
	"NET_SNMP6_IP6_OUT_MCAST_OCTETS",
	"NET_SNMP6_IP6_IN_BCAST_OCTETS",
	"NET_SNMP6_IP6_OUT_BCAST_OCTETS",
	"NET_SNMP6_IP6_IN_NO_ECT_PKTS",
	"NET_SNMP6_IP6_IN_ECT1_PKTS",
	"NET_SNMP6_IP6_IN_ECT0_PKTS",
	"NET_SNMP6_IP6_IN_CE_PKTS",
	"NET_SNMP6_ICMP6_IN_MSGS",
	"NET_SNMP6_ICMP6_IN_ERRORS",
	"NET_SNMP6_ICMP6_OUT_MSGS",
	"NET_SNMP6_ICMP6_OUT_ERRORS",
	"NET_SNMP6_ICMP6_IN_CSUM_ERRORS",
	"NET_SNMP6_ICMP6_IN_DEST_UNREACHS",
	"NET_SNMP6_ICMP6_IN_PKT_TOO_BIGS",
	"NET_SNMP6_ICMP6_IN_TIME_EXCDS",
	"NET_SNMP6_ICMP6_IN_PARM_PROBLEMS",
	"NET_SNMP6_ICMP6_IN_ECHOS",
	"NET_SNMP6_ICMP6_IN_ECHO_REPLIES",
	"NET_SNMP6_ICMP6_IN_GROUP_MEMB_QUERIES",
	"NET_SNMP6_ICMP6_IN_GROUP_MEMB_RESPONSES",
	"NET_SNMP6_ICMP6_IN_GROUP_MEMB_REDUCTIONS",
	"NET_SNMP6_ICMP6_IN_ROUTER_SOLICITS",
	"NET_SNMP6_ICMP6_IN_ROUTER_ADVERTISEMENTS",
	"NET_SNMP6_ICMP6_IN_NEIGHBOR_SOLICITS",
	"NET_SNMP6_ICMP6_IN_NEIGHBOR_ADVERTISEMENTS",
	"NET_SNMP6_ICMP6_IN_REDIRECTS",
	"NET_SNMP6_ICMP6_IN_MLD_V2_REPORTS",
	"NET_SNMP6_ICMP6_OUT_DEST_UNREACHS",
	"NET_SNMP6_ICMP6_OUT_PKT_TOO_BIGS",
	"NET_SNMP6_ICMP6_OUT_TIME_EXCDS",
	"NET_SNMP6_ICMP6_OUT_PARM_PROBLEMS",
	"NET_SNMP6_ICMP6_OUT_ECHOS",
	"NET_SNMP6_ICMP6_OUT_ECHO_REPLIES",
	"NET_SNMP6_ICMP6_OUT_GROUP_MEMB_QUERIES",
	"NET_SNMP6_ICMP6_OUT_GROUP_MEMB_RESPONSES",
	"NET_SNMP6_ICMP6_OUT_GROUP_MEMB_REDUCTIONS",
	"NET_SNMP6_ICMP6_OUT_ROUTER_SOLICITS",
	"NET_SNMP6_ICMP6_OUT_ROUTER_ADVERTISEMENTS",
	"NET_SNMP6_ICMP6_OUT_NEIGHBOR_SOLICITS",
	"NET_SNMP6_ICMP6_OUT_NEIGHBOR_ADVERTISEMENTS",
	"NET_SNMP6_ICMP6_OUT_REDIRECTS",
	"NET_SNMP6_ICMP6_OUT_MLD_V2_REPORTS",
	"NET_SNMP6_ICMP6_OUT_TYPE133",
	"NET_SNMP6_ICMP6_OUT_TYPE135",
	"NET_SNMP6_ICMP6_OUT_TYPE143",
	"NET_SNMP6_UDP6_IN_DATAGRAMS",
	"NET_SNMP6_UDP6_NO_PORTS",
	"NET_SNMP6_UDP6_IN_ERRORS",
	"NET_SNMP6_UDP6_OUT_DATAGRAMS",
	"NET_SNMP6_UDP6_RCVBUF_ERRORS",
	"NET_SNMP6_UDP6_SNDBUF_ERRORS",
	"NET_SNMP6_UDP6_IN_CSUM_ERRORS",
	"NET_SNMP6_UDP6_IGNORED_MULTI",
	"NET_SNMP6_UDP6_MEM_ERRORS",
	"NET_SNMP6_UDPLITE6_IN_DATAGRAMS",
	"NET_SNMP6_UDPLITE6_NO_PORTS",
	"NET_SNMP6_UDPLITE6_IN_ERRORS",
	"NET_SNMP6_UDPLITE6_OUT_DATAGRAMS",
	"NET_SNMP6_UDPLITE6_RCVBUF_ERRORS",
	"NET_SNMP6_UDPLITE6_SNDBUF_ERRORS",
	"NET_SNMP6_UDPLITE6_IN_CSUM_ERRORS",
	"NET_SNMP6_UDPLITE6_MEM_ERRORS",
}

func testNetSnmp6Parser(tc *NetSnmp6TestCase, t *testing.T) {
	var netSnmp6 *NetSnmp6
	if tc.primeNetSnmp6 == nil {
		netSnmp6 = NewNetSnmp6(tc.procfsRoot)
	} else {
		netSnmp6 = tc.primeNetSnmp6.Clone(true)
		if tc.procfsRoot != "" {
			netSnmp6.path = NewNetSnmp6(tc.procfsRoot).path
		}
	}

	err := netSnmp6.Parse()
	if tc.wantError != nil {
		if err == nil || tc.wantError.Error() != err.Error() {
			t.Fatalf("want: %v error, got: %v", tc.wantError, err)
		}
		return
	}
	if err != nil {
		t.Fatal(err)
	}

	wantNetSnmp6 := tc.wantNetSnmp6
	if len(wantNetSnmp6.Values) != len(netSnmp6.Values) {
		t.Fatalf(
			"\nlen(Values): want: %d, got: %d",
			len(wantNetSnmp6.Values), len(netSnmp6.Values),
		)
	}

	diffBuf := &bytes.Buffer{}
	for i, wantValue := range wantNetSnmp6.Values {
		gotValue := netSnmp6.Values[i]
		if wantValue != gotValue {
			fmt.Fprintf(
				diffBuf,
				"\nValues[%s]: want: %d, got: %d",
				netSnmp6IndexName[i], wantValue, gotValue,
			)
		}
	}
	if diffBuf.Len() > 0 {
		t.Fatal(diffBuf.String())
	}
}

func TestNetSnmp6ParserBasic(t *testing.T) {
	for i, tc := range []*NetSnmp6TestCase{
		&NetSnmp6TestCase{
			procfsRoot: path.Join(netSnmp6TestdataDir, "field_mapping"),
			wantNetSnmp6: &NetSnmp6{
				Values: []uint64{
					10000000000001, 10000000000002, 10000000000003, 10000000000004,
					10000000000005, 10000000000006, 10000000000007, 10000000000008,
					10000000000009, 10000000000010, 10000000000011, 10000000000012,
					10000000000013, 10000000000014, 10000000000015, 10000000000016,
					10000000000017, 10000000000018, 10000000000019, 10000000000020,
					10000000000021, 10000000000022, 10000000000023, 10000000000024,
					10000000000025, 10000000000026, 10000000000027, 10000000000028,
					10000000000029, 10000000000030, 10000000000031, 10000000000032,
					10000000000033, 10000000000034, 10000000000035, 10000000000036,
					10000000000037, 10000000000038, 10000000000039, 10000000000040,
					10000000000041, 10000000000042, 10000000000043, 10000000000044,
					10000000000045, 10000000000046, 10000000000047, 10000000000048,
					10000000000049, 10000000000050, 10000000000051, 10000000000052,
					10000000000053, 10000000000054, 10000000000055, 10000000000056,
					10000000000057, 10000000000058, 10000000000059, 10000000000060,
					10000000000061, 10000000000062, 10000000000063, 10000000000064,
					10000000000065, 10000000000066, 10000000000067, 10000000000068,
					10000000000069, 10000000000070, 10000000000071, 10000000000072,
					10000000000073, 10000000000074, 10000000000075, 10000000000076,
					10000000000077, 10000000000078, 10000000000079, 10000000000080,
					10000000000081, 10000000000082, 10000000000083, 10000000000084,
					10000000000085, 10000000000086, 10000000000087,
				},
			},
		},
	} {
		var name string
		if tc.name != "" {
			name = fmt.Sprintf("tc=%d,name=%s,procfsRoot=%s", i, tc.name, tc.procfsRoot)
		} else {
			name = fmt.Sprintf("tc=%d,procfsRoot=%s", i, tc.procfsRoot)
		}
		t.Run(
			name,
			func(t *testing.T) { testNetSnmp6Parser(tc, t) },
		)
	}
}

func TestNetSnmp6ParserComplex(t *testing.T) {
	netSnmp6TestReference := NewNetSnmp6(path.Join(netSnmp6TestdataDir, "reference"))
	err := netSnmp6TestReference.Parse()
	if err != nil {
		t.Fatal(err)
	}

	for i, tc := range []*NetSnmp6TestCase{
		&NetSnmp6TestCase{
			name:          "reuse",
			procfsRoot:    path.Join(netSnmp6TestdataDir, "field_mapping"),
			primeNetSnmp6: netSnmp6TestReference,
			wantNetSnmp6: &NetSnmp6{
				Values: []uint64{
					10000000000001, 10000000000002, 10000000000003, 10000000000004,
					10000000000005, 10000000000006, 10000000000007, 10000000000008,
					10000000000009, 10000000000010, 10000000000011, 10000000000012,
					10000000000013, 10000000000014, 10000000000015, 10000000000016,
					10000000000017, 10000000000018, 10000000000019, 10000000000020,
					10000000000021, 10000000000022, 10000000000023, 10000000000024,
					10000000000025, 10000000000026, 10000000000027, 10000000000028,
					10000000000029, 10000000000030, 10000000000031, 10000000000032,
					10000000000033, 10000000000034, 10000000000035, 10000000000036,
					10000000000037, 10000000000038, 10000000000039, 10000000000040,
					10000000000041, 10000000000042, 10000000000043, 10000000000044,
					10000000000045, 10000000000046, 10000000000047, 10000000000048,
					10000000000049, 10000000000050, 10000000000051, 10000000000052,
					10000000000053, 10000000000054, 10000000000055, 10000000000056,
					10000000000057, 10000000000058, 10000000000059, 10000000000060,
					10000000000061, 10000000000062, 10000000000063, 10000000000064,
					10000000000065, 10000000000066, 10000000000067, 10000000000068,
					10000000000069, 10000000000070, 10000000000071, 10000000000072,
					10000000000073, 10000000000074, 10000000000075, 10000000000076,
					10000000000077, 10000000000078, 10000000000079, 10000000000080,
					10000000000081, 10000000000082, 10000000000083, 10000000000084,
					10000000000085, 10000000000086, 10000000000087,
				},
			},
		},
	} {
		var name string
		if tc.name != "" {
			name = fmt.Sprintf("tc=%d, name=%s,procfsRoot=%s", i, tc.name, tc.procfsRoot)
		} else {
			name = fmt.Sprintf("tc=%d,procfsRoot=%s", i, tc.procfsRoot)
		}
		t.Run(
			name,
			func(t *testing.T) { testNetSnmp6Parser(tc, t) },
		)
	}
}
